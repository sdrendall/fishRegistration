#! /usr/bin/python

from sys import argv
import subprocess as sp
import os, json, glob, argparse

def generateParser():
    parser = argparse.ArgumentParser(
        description='The first script to be called in the image registration pipeline. \n\
        This script should be run from the root directory of the directory heirarchy \
         containing all images to be registered.')
    parser.add_argument('experimentPath', default=os.path.abspath('.'),
        help='Specifies the root directory containing the data to be processed.  Defaults to the current directory.')
    parser.add_argument('-b', '--useBatch', default=False, action='store_true',
        help='Parallelizes computation by submitting jobs to an LSF queue, using the bsub command.')
    parser.add_argument('--flip', default=0, action='store_const', const=1,
        help='Flips the image vertically during preprocessing')
    parser.add_argument('--flop', default=0, action='store_const', const=1,
        help='Flips the image horizontally during preprocessing')
    parser.add_argument('-p', '--registrationPlane', default=1, type=int,
        help='The image plane (channel) to be registered to the atlas.\
          Ideally, this plane contains an image of some sort of nuclear stain (DAPI, Hoechst, NISSL...) should be used')
    parser.add_argument('-s', '--segmentationPlane', default=2, type=int,
        help='The plane (channel) to be used to segment the brain section in the image from the background.\
          Ideally this plane contains an image with high tissue autofluorescence (green), and relatively sparse staining')

    return parser


def createDataDirectory(expPath):
    dataPath = os.path.join(expPath, '.registrationData')
    ensureDir(dataPath)
    return dataPath

def ensureDir(dirPath):
    if not os.path.exists(dirPath):
        os.mkdir(dirPath)
    elif not os.path.isdir(dirPath):
        print "Warning! Non-directory file exists at:\n\t%s" % dirPath

def createJsonFile(dataPath, imagePath):
    jsonPath = os.path.join(dataPath, 'metadata.json')
    jsonFile = open(jsonPath, 'w')
    return jsonFile, jsonPath

def populateJsonFile(j, vsiPaths):
    dictList = list()
    for vsiPath in vsiPaths:
            imDict = {'vsiPath': vsiPath}
            dictList.append(imDict)
    json.dump(dictList, j, sort_keys=True, indent=4)

def findVsis(expPath):
    vsiPaths = list()
    for root, dirs, files in os.walk(expPath):
        for filename in files:
            if filename.endswith('.vsi'):
                fullPath = os.path.join(root, filename)
                relPath = os.path.relpath(fullPath, expPath)
                vsiPaths.append(relPath)
    return vsiPaths

def preprocess_local():

    argStr = 'matlab -nosplash -nodesktop -r "downsampleAndSegmentVsis(\'{}\'); exit"'.format(jsonPath)
    print "argStr: " + argStr
    sp.call(argStr, shell=True, cwd=experimentPath, env=os.environ)

def generatePreprocessingArgs(jsonPath, inputArgs):
    argStr = "matlab -nosplash -nodesktop -r \"downsampleAndSegmentVsis('%s', 'flip', {flip}, 'flop', {flop}, \
        'registrationPlane', {registrationPlane}, 'segmentationPlane', {segmentationPlane})\"; exit" % jsonPath
    argStr.format(**inputArgs)

    if inputArgs.useBatch:
        argStr = 'bsub -q short -W 0:30 -R "rusage[mem=4000]" ' + argStr

    return argStr


def main():
    parser = generateParser()
    args = parser.parse_args()

    dataPath = createDataDirectory(args.experimentPath)
    vsiPaths = findVsis(args.experimentPath)
    jsonFile, jsonPath = createJsonFile(dataPath, vsiPaths)
    populateJsonFile(jsonFile, vsiPaths)
    jsonFile.close()

    # Call the matlab preprocessing function
    preprocessingArgs = generatePreprocessingArgs(jsonPath, args)
    sp.call(preProcessingArgs, shell=True, cwd=args.experimentPath, env=os.environ)

    if not args.useBatch:
        print "Preprocessing Complete!"
        print "Experiment Root Path:", experimentPath
        print "Data Path:", dataPath
        print "JSON Path:", jsonPath
    else:
        print "Preprocessing jobs submitted."
        print "Please wait for all jobs to complete before continuing the registration pipeline"
    

if __name__ == "__main__":
    main()