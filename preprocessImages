#! /usr/bin/python

import subprocess as sp
import os
import argparse
from pythonMods import jsonTools

def generateParser():
    parser = argparse.ArgumentParser(
        description='The first script to be called in the image registration pipeline. \n\
        This script should be run from the root directory of the directory heirarchy \
         containing all images to be registered.')
    parser.add_argument('-e', '--experimentPath', default=os.getcwd(),
        help='Specifies the root directory containing the data to be processed.  Defaults to the current directory.')
    parser.add_argument('-b', '--useBatch', default=False, action='store_true',
        help='Parallelizes computation by submitting jobs to an LSF queue, using the bsub command.')
    parser.add_argument('--flip', default=0, action='store_const', const=1,
        help='Flips the image vertically during preprocessing')
    parser.add_argument('--flop', default=0, action='store_const', const=1,
        help='Flips the image horizontally during preprocessing')
    parser.add_argument('-p', '--registrationPlane', default=1, type=int,
        help='The image plane (channel) to be registered to the atlas.\
          Ideally, this plane contains an image of some sort of nuclear stain (DAPI, Hoechst, NISSL...) should be used')
    parser.add_argument('-s', '--segmentationPlane', default=2, type=int,
        help='The plane (channel) to be used to segment the brain section in the image from the background.\
          Ideally this plane contains an image with high tissue autofluorescence (green), and relatively sparse staining')


    return parser

def findVsis(expPath):
    vsiPaths = list()
    for root, dirs, files in os.walk(expPath):
        for filename in files:
            if filename.endswith('.vsi'):
                fullPath = os.path.join(root, filename)
                relPath = os.path.relpath(fullPath, expPath)
                vsiPaths.append(relPath)
    return vsiPaths

def generateDownsampledImagePath(vsiPath):
    vsiName = os.path.split(vsiPath)[1]
    rawName = os.path.splitext(vsiName)[0]
    return os.path.join('.registrationData', rawName + '_downsampled.mhd')

def generatePreprocessingArgs(imageData, inputArgs):
    argStr = "matlab -nosplash -nodesktop -r \"downsampleAndSegmentVsis('%s', '%s', " \
        "'Flip', {flip}, 'Flop', {flop}, 'registrationPlane', {registrationPlane}, 'segmentationPlane', {segmentationPlane});" \
        " exit\""
    argStr % (os.path.abspath(imageData['vsiPath']), os.path.abspath(imageData['downsampledImagePath']))
    argStr.format(**vars(inputArgs))

    if inputArgs.useBatch:
        return 'bsub -q short -W 0:30 -R "rusage[mem=4000]" ' + argStr
    else:
        return argStr


def main():
    # Parse input arguments from command line
    parser = generateParser()
    args = parser.parse_args()

    # For convenience, I'm going to set the cwd to the experiment path
    os.chdir(args.experimentPath)

    # Find files to register, and create storage space for metadata
    # Then, add the vsiPaths to the metadata
    metadataHandler = jsonTools.MetadataHandler(args.experimentPath)
    metadataHandler.ensure_metadata_directory()
    vsiPaths = findVsis(args.experimentPath)
    metadataHandler.metadata = [{'vsiPath': vsiPath} for vsiPath in vsiPaths]

    for data in metadataHandler.metadata:
        # Call the matlab preprocessing function
        data['downsampledImagePath'] = generateDownsampledImagePath(data['vsiPath'])
        preprocessingArgs = generatePreprocessingArgs(data, args)
        sp.call(preprocessingArgs, shell=True, cwd=args.experimentPath, env=os.environ)
        metadataHandler.update_metadata()

    if not args.useBatch:
        print "Preprocessing Complete!"
    else:
        print "Preprocessing jobs submitted."
        print "Please wait for all jobs to complete before continuing the registration pipeline"
    

if __name__ == "__main__":
    main()