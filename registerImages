#!/usr/bin/python

import os, json, argparse
from pythonMods import jsonTools
import subprocess as sp

def generateParser():
    parser = argparse.ArgumentParser(
        description="A script to register images to the Allen Brain Atlas using ITK.")
    parser.add_argument('-e', '--experimentPath', default=os.path.abspath('.'))
    parser.add_argument('-b', '--useBatch', action='store_true')
    return parser

def generateArgString(imdata):
    return "registerSliceToAtlas '{downsampledImagePath}' '{atlasIndex}' \
        '{registeredAtlasReferenceImagePath}' '{registeredAtlasLabelsPath}' '{registrationMetricLogPath}'".format(**imdata)

def generateReferenceOutputPaths(imdata):
    imdata['registeredAtlasReferenceImagePath'] = generateReferenceImagePath(imdata['downsampledImagePath'])
    imdata['registeredAtlasLabelsPath'] = generateLabelsPath(imdata['downsampledImagePath']) 
    imdata['registrationMetricLogPath'] = generateMetricLogPath(imdata['downsampledImagePath'])

def generateReferenceImagePath(downsampledImagePath):
    return downsampledImagePath.rsplit('_', 1)[1] + u'_registeredAtlasReferenceImage.mhd' # remove '_downsampled'

def generateLabelsPath(downsampledImagePath):
    return downsampledImagePath.rsplit('_', 1)[1] + u'_registeredAtlasLabels.mhd' # remove '_downsampled'

def generateMetricLogPath(downsampledImagePath):
    return downsampledImagePath.rsplit('_', 1)[1] + u'_registrationMetricLog.tsv' # remove '_downsampled'

def registerImage(imdata, expPath, submitJob=False):
    generateReferenceOutputPaths(imdata)
    argStr = generateArgString(imdata)
    if submitJob:
        openRegistrationProcess_bsub(imdata, argStr, expPath)
    else:
        openRegistrationProcess_local(imdata, argStr, expPath)

def openRegistrationProcess_local(imdata, argStr, expPath):
    try:
        print "Registering %s......" % imdata['downsampledImagePath']
        sp.call(argStr, shell=True, cwd=expPath, env=os.environ)
    except sp.CalledProcessError as e:
        print "Registration failed for %s!" % imdata['downsampledImagePath']
        print "registerSliceToAtlas returned with return code: %r" % e.returncode
        print "Output: %s" % e.output
        imdata['registrationSuccessful'] = False
    else:
        imdata['registrationSuccessful'] = True

def openRegistrationProcess_bsub(imdata, argStr, expPath):
    argStr = 'bsub -q short -W 0:40 -R "rusage[mem=4000]" -n 4'.split() + argStr
    try:
        sp.call(argStr, shell=True, cwd=expPath, env=os.environ)
    except:
        print 'Job submission failed!'
        imdata['registrationSuccessful'] = False
    else:
        imdata['registrationSuccessful'] = True

def loadJson(jsonPath):
    jsonFile = open(jsonPath, 'r')
    dictList = json.load(jsonFile)
    jsonFile.close()
    return dictList

def updateJson(jsonPath, dictList):
    jsonFile = open(jsonPath, 'w')
    json.dump(dictList, jsonFile, sort_keys=True, indent=4)
    jsonFile.close()


def main():
    parser = generateParser()
    args = parser.parse_args()
    expPath = args.experimentPath

    # Load JSON
    metadataHandler = jsonTools.MetadataHandler(experimentPath=expPath)
    metadata = metadataHandler.load_metadata()

    # Lists and dicts are mutable so they will be modified in place
    for imdata in metadata:
        if imdata['exclude'] == 0:
            # Run registration pipeline
            registerImage(imdata, expPath, submitJob=args.useBatch)
            # Update JSON file
            metadataHandler.update_metadata()
        else:
            print "Excluding " + imdata['vsiPath']

    print 'Registration complete!'

if __name__ == '__main__':
    main()