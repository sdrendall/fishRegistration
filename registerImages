#!/usr/bin/python

import os, json, sys, argparse
import subprocess as sp

def generateParser():
    parser = argparse.ArgumentParser(
        description="A script to register images to the Allen Brain Atlas using ITK.")
    parser.add_argument('-e', '--experimentPath', default=os.path.abspath('.'))
    parser.add_argument('-b', '--useBatch', action='store_true')
    return parser

def generateJsonPath(expPath):
    return os.path.join(expPath, '.registrationData' ,'metadata.json')

def isInvalidExperimentPath(expPath):
    jsonPath = generateJsonPath(expPath)
    if not os.path.isfile(jsonPath):
        print "%s not found!" % jsonPath
        return True
    else:
        return False

def generateArgList(imdata):
    argStr = "registerSliceToAtlas '{downsampledImagePath}' '{atlasIndex}' \
        '{registeredAtlasReferenceImagePath}' '{registeredAtlasLabelsPath}'".format(**imdata)
    return argStr.split()

def generateReferenceOutputPaths(imdata):
    imdata['registeredAtlasReferenceImagePath'] = generateReferenceImagePath(imdata['downsampledImagePath'])
    imdata['registeredAtlasLabelsPath'] = generateLabelsPath(imdata['downsampledImagePath']) 
    imdata['registrationMetricLogPath'] = generateMetricLogPath(imdata['downsampledImagePath'])

def registerImage(imdata, expPath, submitJob=False):
    generateReferenceOutputPaths(imdata)
    argList = generateargListing(imdata)
    if submitJob:
        openRegistrationProcess_bsub(argList, expPath)
    else:
        openRegistrationProcess_local(argList, expPath)

def openRegistrationProcess_local(argList, expPath):
    try:
        print "Registering %s......" % imdata['downsampledImagePath']
        sp.check_output(argList, shell=True, cwd=expPath, env=os.environ)
    except sp.CalledProcessError as e:
        print "Registration failed for %s!" % imdata['downsampledImagePath']
        print "registerSliceToAtlas returned with return code: %r" % e.returncode
        print "Output: %s" % e.output
        imdata['registrationSuccessful'] = False
    else:
        imdata['registrationSuccessful'] = True

def openRegsistrationProcess_bsub(argList, expPath):
    argList = 'bsub -q short -W 0:40 -R "rusage[mem=500]" -n 4'.split() + argList
    try:
        sp.check_call(argList, cwd=expPath, env=os.environ)
    except e:
        print 'Job submission failed!'
        imdata['registrationSuccessful'] = False
    else:
        imdata['registrationSuccessful'] = True

def generateReferenceImagePath(downsampledImagePath):
    outputPath = os.path.splitext(downsampledImagePath)[0] #remove suffix
    return outputPath[:-12] + u'_registeredAtlasReferenceImage.mhd' # remove '_downsampled'
    
def generateLabelsPath(downsampledImagePath):
    outputPath = os.path.splitext(downsampledImagePath)[0] #remove suffix
    return outputPath[:-12] + u'_registeredAtlasLabels.mhd' # remove '_downsampled'

def generateMetricLogPath(downsampledImagePath):
    outputPath = os.path.splitext(downsampledImagePath)[0] #remove suffix
    return outputPath[:-12] + u'_registrationMetricLog.tsv' # remove '_downsampled'

def loadJson(jsonPath):
    jsonFile = open(jsonPath)
    dictList = json.load(jsonFile)
    jsonFile.close()
    return dictList

def updateJson(jsonPath, dictList):
    jsonFile = open(jsonPath, 'w')
    json.dump(dictList, jsonFile, sort_keys=True, indent=4)
    jsonFile.close()


def main():
    parser = generateParser()
    args = parser.parse_args()
    expPath = args.experimentPath

    if isInvalidExperimentPath(expPath):
        print "Invalid Experiment Path:"
        print expPath
        return

    print "expPath: ", expPath

    # Load JSON
    jsonPath = generateJsonPath(expPath)
    dictList = loadJson(jsonPath)

    # Lists and dicts are mutable so they will be modified in place
    for imdata in dictList:
        if imdata['exclude'] == 0:
            # Run registration pipeline
            registerImage(imdata, expPath, submitJob=args.useBatch)
            # Update JSON file
            updateJson(jsonPath, dictList)
        else:
            print "Excluding " + imdata['vsiPath']

    print 'Registration complete!'

if __name__ == '__main__':
    main()